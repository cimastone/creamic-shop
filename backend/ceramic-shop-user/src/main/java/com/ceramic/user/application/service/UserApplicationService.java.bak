package com.ceramic.user.application.service;

import com.ceramic.user.application.dto.*;
import com.ceramic.user.domain.model.Address;
import com.ceramic.user.domain.model.AddressId;
import com.ceramic.user.domain.model.User;
import com.ceramic.user.domain.model.UserId;
import com.ceramic.user.domain.service.UserDomainService;
import com.ceramic.user.infrastructure.util.PasswordEncoder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * 用户应用服务实现类
 */
@Service
public class UserApplicationService {

    private final UserDomainService userDomainService;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public UserApplicationService(UserDomainService userDomainService, PasswordEncoder passwordEncoder) {
        this.userDomainService = userDomainService;
        this.passwordEncoder = passwordEncoder;
    }

    /**
     * 注册用户
     */
    @Transactional
    public UserDTO register(RegisterUserRequest request) {
        // 检查用户名是否已存在
        if (userDomainService.checkUserExists(request.getUsername())) {
            throw new IllegalArgumentException("Username already exists");
        }

        // 对密码进行加密
        String encodedPassword = passwordEncoder.encode(request.getPassword());

        // 创建用户
        User user = userDomainService.registerUser(
                request.getUsername(),
                encodedPassword,
                request.getEmail(),
                request.getPhone(),
                request.getNickname()
        );

        return convertToDTO(user);
    }

    /**
     * 用户登录
     */
    public Optional<UserDTO> login(LoginRequest request) {
        return userDomainService.getUserByUsername(request.getUsername())
                .filter(user -> passwordEncoder.matches(request.getPassword(), user.getPassword()))
                .map(this::convertToDTO);
    }

    /**
     * 更新用户资料
     */
    @Transactional
    public UserDTO updateProfile(Long userId, UserDTO userDTO) {
        User user = userDomainService.updateUserProfile(
                new UserId(userId),
                userDTO.getNickname(),
                userDTO.getEmail(),
                userDTO.getPhone()
        );
        return convertToDTO(user);
    }

    /**
     * 修改密码
     */
    @Transactional
    public UserDTO changePassword(Long userId, String oldPassword, String newPassword) {
        User user = userDomainService.getUserById(new UserId(userId))
                .orElseThrow(() -> new IllegalArgumentException("User not found"));

        if (!passwordEncoder.matches(oldPassword, user.getPassword())) {
            throw new IllegalArgumentException("Old password is incorrect");
        }

        String encodedNewPassword = passwordEncoder.encode(newPassword);
        user = userDomainService.changePassword(new UserId(userId), encodedNewPassword);
        return convertToDTO(user);
    }

    /**
     * 根据ID获取用户
     */
    public Optional<UserDTO> getUserById(Long userId) {
        return userDomainService.getUserById(new UserId(userId)).map(this::convertToDTO);
    }

    /**
     * 添加收货地址
     */
    @Transactional
    public AddressDTO addAddress(Long userId, AddressRequest request) {
        Address address = userDomainService.addAddress(
                new UserId(userId),
                request.getReceiverName(),
                request.getReceiverPhone(),
                request.getProvince(),
                request.getCity(),
                request.getDistrict(),
                request.getDetailAddress()
        );
        return convertAddressToDTO(address);
    }

    /**
     * 更新收货地址
     */
    @Transactional
    public AddressDTO updateAddress(Long userId, Long addressId, AddressRequest request) {
        Address address = userDomainService.updateAddress(
                new UserId(userId),
                new AddressId(addressId),
                request.getReceiverName(),
                request.getReceiverPhone(),
                request.getProvince(),
                request.getCity(),
                request.getDistrict(),
                request.getDetailAddress()
        );
        return convertAddressToDTO(address);
    }

    /**
     * 设置默认地址
     */
    @Transactional
    public AddressDTO setDefaultAddress(Long userId, Long addressId) {
        Address address = userDomainService.setDefaultAddress(new UserId(userId), new AddressId(addressId));
        return convertAddressToDTO(address);
    }

    /**
     * 删除收货地址
     */
    @Transactional
    public void deleteAddress(Long userId, Long addressId) {
        userDomainService.deleteAddress(new UserId(userId), new AddressId(addressId));
    }

    /**
     * 获取用户的所有收货地址
     */
    public List<AddressDTO> getUserAddresses(Long userId) {
        List<Address> addresses = userDomainService.getUserAddresses(new UserId(userId));
        return addresses.stream()
                .map(this::convertAddressToDTO)
                .collect(Collectors.toList());
    }

    /**
     * 获取用户的默认收货地址
     */
    public Optional<AddressDTO> getUserDefaultAddress(Long userId) {
        return userDomainService.getUserDefaultAddress(new UserId(userId))
                .map(this::convertAddressToDTO);
    }

    /**
     * 将用户实体转换为DTO
     */
    private UserDTO convertToDTO(User user) {
        UserDTO dto = new UserDTO();
        dto.setId(user.getId().getValue());
        dto.setUsername(user.getUsername());
        dto.setNickname(user.getNickname());
        dto.setEmail(user.getEmail());
        dto.setPhone(user.getPhone());
        dto.setCreatedAt(user.getCreatedAt());
        dto.setUpdatedAt(user.getUpdatedAt());
        return dto;
    }

    /**
     * 将地址实体转换为DTO
     */
    private AddressDTO convertAddressToDTO(Address address) {
        AddressDTO dto = new AddressDTO();
        dto.setId(address.getId().getValue());
        dto.setUserId(address.getUserId().getValue());
        dto.setReceiverName(address.getReceiverName());
        dto.setReceiverPhone(address.getReceiverPhone());
        dto.setProvince(address.getProvince());
        dto.setCity(address.getCity());
        dto.setDistrict(address.getDistrict());
        dto.setDetailAddress(address.getDetailAddress());
        dto.setIsDefault(address.isDefault());
        dto.setCreatedAt(address.getCreatedAt());
        dto.setUpdatedAt(address.getUpdatedAt());
        return dto;
    }
} 